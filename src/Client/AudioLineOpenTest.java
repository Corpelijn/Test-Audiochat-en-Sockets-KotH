/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Client;

import java.io.ByteArrayOutputStream;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.TargetDataLine;

/**
 *
 * @author Bas
 */
public class AudioLineOpenTest {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        TargetDataLine line = null;
        DataLine.Info info = new DataLine.Info(TargetDataLine.class, StaticAudioAttributes.AudioDataFormat); // format is an AudioFormat object
        if (!AudioSystem.isLineSupported(info)) {
            // Handle the error ... 

        }
        // Obtain and open the line.
        try {
            line = (TargetDataLine) AudioSystem.getLine(info);
            line.open(StaticAudioAttributes.AudioDataFormat);
        } catch (LineUnavailableException ex) {
            // Handle the error ... 
        }

        if(line == null)
        {
            return;
        }
        
        System.out.println("SUCCESS");

        // Assume that the TargetDataLine, line, has already
        // been obtained and opened.
        boolean stopped = false;
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        int numBytesRead;
        byte[] data = new byte[line.getBufferSize() / 5];

        // Begin audio capture.
        line.start();
        
        Date d = new Date();
        int tijd = 60000;

        // Here, stopped is a global boolean set by another thread.
        System.out.println("Started recording");
        while (!stopped) {
            Date d1 = new Date();
            long timediff = d1.getTime() - d.getTime();
            if(timediff >= tijd)
            {
                break;
            }
            
            // Read the next chunk of data from the TargetDataLine.
            numBytesRead = line.read(data, 0, data.length);
            // Save this chunk of data.
            out.write(data, 0, numBytesRead);
        }
        
        line.close();
        
        System.out.println("Stopped recording");
        
        DataLine.Info dataLineInfo = new DataLine.Info(SourceDataLine.class, StaticAudioAttributes.AudioDataFormat);
        SourceDataLine speakers = null;
        try {
            speakers = (SourceDataLine) AudioSystem.getLine(dataLineInfo);
            speakers.open(StaticAudioAttributes.AudioDataFormat);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(AudioLineOpenTest.class.getName()).log(Level.SEVERE, null, ex);
        }
        speakers.start();
        
        speakers.write(out.toByteArray(), 0, out.size());
        
        speakers.drain();
        speakers.close();
    }

}
